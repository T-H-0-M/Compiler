# CD24 Grammar

<!-- prettier-ignore-start -->
## Left Factored Draft

<program> ::= CD24 <id> <globals> <funcs> <mainbody>

<globals> ::= <consts> <types> <arrays>

<consts> ::= constants <initlist> | ε
<!--INFO: Left factored: <initlist> ::= <init> | <init> , <initlist>-->
<initlist> ::= <init> <initlisttail>
<initlisttail> ::= , <initlist> | ε
<init> ::= <id> = <expr>

<types> ::= typedef <typelist> | ε
<!--INFO: Left Recursion - Left factored: <typelist> ::= <type> <typelist> | <type>-->
<typelist> ::= <type> <typelisttail>
<typelisttail> ::= <typelist> | ε
<!--INFO: Concatinated for readability -->
<type> ::= <structid> def <fields> end | <typeid> def array \[ <expr> \] of <structid> end
<!--INFO: Left factored: <fields> ::= <sdecl> | <sdecl> , <fields>-->
<fields> ::= <sdecl> <fieldstail>
<fieldstail> ::= , <fields> | ε

<arrays> ::= arraydef <arrdecls> | ε
<!--INFO: Left factored: <arrdecls> ::= <arrdecl> | <arrdecl> , <arrdecls> -->
<arrdecls> ::= <arrdecl> <arrdeclstail>
<arrdeclstail> ::= , <arrdecls> | ε
<arrdecl> ::= <id> : <typeid>

<!--BUG: Im not sure how to factor this one-->
<funcs> ::= <func> <funcs> | ε
<func> ::= func <id> ( <plist> ) : <rtype> <funcbody>
<rtype> ::= <stype> | void
<plist> ::= <params> | ε
<!--INFO: Left factored: <params> ::= <param> | <param> , <params>-->
<params> ::= <param> <paramstail>
<paramstail> ::= , <params> | ε
<param> ::= <sdecl> | <arrdecl> | const <arrdecl>
<funcbody> ::= <locals> begin <stats> end

<locals> ::= <dlist> | ε
<!--INFO: Left factored: <dlist> ::= <decl> | <decl> , <dlist>-->
<dlist> ::= <decl> <dlisttail>
<dlisttail> ::= , <dlist> | ε
<decl> ::= <sdecl> | <arrdecl>

<mainbody> ::= main <slist> begin <stats> end CD24 <id>
<!--INFO: Left factored: <slist> ::= <sdecl> | <sdecl> , <slist>-->
<slist> ::= <sdecl> <slisttail>
<slisttail> ::= , <slist> | ε
<sdecl> ::= <id> : <stype> | <id> : <structid>
<stype> ::= int | float | bool

<!--INFO: Left recursion - Left factored: <stats> ::= <stat> ; <stats> | <strstat> <stats> | <stat> ; | <strstat>-->
<stats> ::= <stat> ; <statstail> | <strstat> <statstail>
<statstail> ::= <stats> | ε
<strstat> ::= <forstat> | <ifstat> | <switchstat> | <dostat>
<stat> ::= <reptstat> | <asgnstat> | <iostat> | <callstat> | <returnstat>

<forstat> ::= for ( <asgnlist> ; <bool> ) <stats> end
<repstat> ::= repeat ( <asgnlist> ) <stats> until <bool>
<dostat> ::= do <stats> while ( <bool> ) end
<asgnlist> ::= <alist> | ε
<!--INFO: Left factored: <alist> ::= <asgnstat> | <asgnstat> , <alist>-->
<alist> ::= <asgnstat> <alisttail>
<alisttail> ::= , <alist> | ε

<ifstat> ::= if ( <bool> ) <stats> end
<ifstat> ::= if ( <bool> ) <stats> else <stats> end
<ifstat> ::= if ( <bool> ) <stats> elif (<bool>) <stats> end

<switchstat> ::= switch ( <expr> ) begin <caselist> end
<caselist> ::= case <expr> : <stats> <caselist> | default : <stats>

<asgnstat> ::= <var> <asgnop> <bool>
<asgnop> ::= = | += | -= | *= | /=
<iostat> ::= input <vlist> | print <prlist> | printline <prlist>
<callstat> ::= <id> ( <elist> ) | <id> ( )
<returnstat> ::= return void | return <expr>

<vlist> ::= <var> <vlisttail>
<vlisttail> ::= , <vlist> | ε
<!--INFO: Left factored twice: <var> ::= <id> | <id>\[<expr>\] | <id>\[<expr>\] . <id>-->
<var> ::= <id> <vartail>
<vartail> ::= \[ <expr> \] <varfield> | ε
<varfield> ::= . <id> | ε
<!--INFO: Left factored: <elist> ::= <bool> , <elist> | <bool>-->
<elist> ::= <bool> <elisttail>
<elisttail> ::= , <elist> | ε

<!--INFO: Left factored: <bool> ::= not <bool> | <bool><logop> <rel> | <rel>-->
<bool> ::= not <bool> | <rel> <booltail>
<booltail> ::= <logop> <rel> <booltail> | ε
<!--INFO: Left factored: <rel> ::= <expr> <relop><expr> | <expr>-->
<rel> ::= <expr> <reltail>
<reltail> ::= <relop> <expr> | ε
<logop> ::= and | or | xor
<relop> ::= == | != | > | <= | < | >=

<!--BUG: Return to this not completely factored-->
<!--INFO: Left recursive - Left factored: <expr> ::= <expr> + <term> | <expr> - <term> | <term>-->
<expr> ::= <term> <exprtail>
<exprtail> ::= + <term> <exprtail> | - <term> <exprtail> | ε
<!--BUG: Return to this not completely factored-->
<!--INFO: Left recursive - Left factored: <term> ::= <term> * <fact> | <term> / <fact> | <term> % <fact> | <fact>-->
<term> ::= <fact> <termtail>
<termtail> ::= * <fact> <termtail> | / <fact> <termtail> | % <fact> <termtail> | ε
<!--BUG: Return to this not completely factored-->
<!--INFO: Left recursive - Left factored: <fact> ::= <fact> ^ <exponent> | <exponent>-->
<fact> ::= <exponent> <facttail>
<facttail> ::= ^ <exponent> <facttail> | ε
<exponent> ::= <var> | <intlit> | <reallit> | <fncall> | true | false | ( <bool> )

<fncall> ::= <id> ( <elist> ) | <id> ( )

<!--INFO: Left recursive - Left factored: <prlist> ::= <printitem> , <prlist> | <printitem>-->
<prlist> ::= <printitem> <prlisttail>
<prlisttail> ::= , <prlist> | ε
<printitem> ::= <expr> | <string>

## Original Grammar

<program> ::= CD24 <id> <globals> <funcs> <mainbody>

<globals> ::= <consts> <types> <arrays>

<consts> ::= constants <initlist> | ε
<initlist> ::= <init> | <init> , <initlist>
<init> ::= <id> = <expr>

<types> ::= typedef <typelist> | ε
<typelist> ::= <type> <typelist> | <type>
<type> ::= <structid> def <fields> end
<type> ::= <typeid> def array \[ <expr> \] of <structid> end
<fields> ::= <sdecl> | <sdecl> , <fields>

<arrays> ::= arraydef <arrdecls> | ε
<arrdecls> ::= <arrdecl> | <arrdecl> , <arrdecls>
<arrdecl> ::= <id> : <typeid>

<funcs> ::= <func> <funcs> | ε
<func> ::= func <id> ( <plist> ) : <rtype> <funcbody>
<rtype> ::= <stype> | void
<plist> ::= <params> | ε
<params> ::= <param> | <param> , <params>
<param> ::= <sdecl> | <arrdecl> | const <arrdecl>
<funcbody> ::= <locals> begin <stats> end

<locals> ::= <dlist> | ε
<dlist> ::= <decl> | <decl> , <dlist>
<decl> ::= <sdecl> | <arrdecl>

<mainbody> ::= main <slist> begin <stats> end CD24 <id>
<slist> ::= <sdecl> | <sdecl> , <slist>
<sdecl> ::= <id> : <stype> | <id> : <structid>
<stype> ::= int | float | bool

<stats> ::= <stat> ; <stats> | <strstat> <stats> | <stat>; | <strstat>
<strstat> ::= <forstat> | <ifstat> | <switchstat> | <dostat>
<stat> ::= <reptstat> | <asgnstat> | <iostat> | <callstat> | <returnstat>

<forstat> ::= for ( <asgnlist> ; <bool> ) <stats> end
<repstat> ::= repeat ( <asgnlist> ) <stats> until <bool>
<dostat> ::= do <stats> while ( <bool> ) end
<asgnlist> ::= <alist> | ε
<alist> ::= <asgnstat> | <asgnstat> , <alist>

<ifstat> ::= if ( <bool> ) <stats> end
<ifstat> ::= if ( <bool> ) <stats> else <stats> end
<ifstat> ::= if ( <bool> ) <stats> elif (<bool>) <stats> end

<switchstat> ::= switch ( <expr> ) begin <caselist> end
<caselist> ::= case <expr> : <stats> <caselist> | default : <stats>

<asgnstat> ::= <var> <asgnop> <bool>
<asgnop> ::= = | += | -= | *= | /=

<iostat> ::= input <vlist> | print <prlist> | printline <prlist>
<callstat> ::= <id> ( <elist> ) | <id> ( )
<returnstat> ::= return void | return <expr>

<vlist> ::= <var> , <vlist> | <var>
<var> ::= <id> | <id>\[<expr>\] | <id>\[<expr>\] . <id>
<elist> ::= <bool> , <elist> | <bool>

<bool> ::= not <bool> | <bool><logop> <rel> | <rel>
<rel> ::= <expr> <relop><expr> | <expr>
<logop> ::= and | or | xor
<relop> ::= == | != | > | <= | < | >=

<expr> ::= <expr> + <term> | <expr> - <term> | <term>
<term> ::= <term> * <fact> | <term> / <fact> | <term> % <fact> | <fact>
<fact> ::= <fact> ^ <exponent> | <exponent>
<exponent> ::= <var> | <intlit> | <reallit> | <fncall> | true | false
<exponent> ::= ( <bool> )

<fncall> ::= <id> ( <elist> ) | <id> ( )

<prlist> ::= <printitem> , <prlist> | <printitem>
<printitem> ::= <expr> | <string>
<!-- prettier-ignore-end -->
